{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Document, { Html, Main, NextScript } from 'next/document';\nimport { ServerStyleSheets } from '@material-ui/core/styles';\nimport HeadComponent from '../components/head';\n\nclass MyDocument extends Document {\n  render() {\n    return __jsx(Html, {\n      lang: \"en\",\n      dir: \"ltr\"\n    }, __jsx(HeadComponent, null), __jsx(\"body\", null, __jsx(\"div\", {\n      id: \"preloader\",\n      style: {\n        position: 'fixed',\n        zIndex: 10000,\n        background: '#fafafa',\n        width: '100%',\n        height: '100%'\n      }\n    }, __jsx(\"img\", {\n      style: {\n        opacity: 0.5,\n        position: 'fixed',\n        top: 'calc(50% - 50px)',\n        left: 'calc(50% - 50px)'\n      },\n      src: \"/images/loading.gif\",\n      alt: \"loading\"\n    })), __jsx(Main, null), __jsx(NextScript, null)));\n  }\n\n}\n\nMyDocument.getInitialProps = async ctx => {\n  // Resolution order\n  //\n  // On the server:\n  // 1. app.getInitialProps\n  // 2. page.getInitialProps\n  // 3. document.getInitialProps\n  // 4. app.render\n  // 5. page.render\n  // 6. document.render\n  //\n  // On the server with error:\n  // 1. document.getInitialProps\n  // 2. app.render\n  // 3. page.render\n  // 4. document.render\n  //\n  // On the client\n  // 1. app.getInitialProps\n  // 2. page.getInitialProps\n  // 3. app.render\n  // 4. page.render\n  // Render app and page and get the context of the page with collected side effects.\n  const sheets = new ServerStyleSheets();\n  const originalRenderPage = ctx.renderPage;\n\n  ctx.renderPage = () => originalRenderPage({\n    // eslint-disable-line\n    enhanceApp: App => props => sheets.collect(__jsx(App, props)) // eslint-disable-line\n\n  });\n\n  const initialProps = await Document.getInitialProps(ctx);\n  return _objectSpread(_objectSpread({}, initialProps), {}, {\n    namespacesRequired: ['architect-landing', 'common'],\n    // Styles fragment is rendered after the app and page rendering finish.\n    styles: [...React.Children.toArray(initialProps.styles), false && sheets.getStyleElement()]\n  });\n};\n\nexport default MyDocument;","map":null,"metadata":{},"sourceType":"module"}