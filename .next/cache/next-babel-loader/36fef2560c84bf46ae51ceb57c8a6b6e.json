{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Container from '@material-ui/core/Container';\nimport clsx from 'clsx';\nimport Hidden from '@material-ui/core/Hidden';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\nimport PlayIcon from '@material-ui/icons/PlayArrow';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Grid from '@material-ui/core/Grid';\nimport YouTube from 'react-youtube';\nimport Button from '@material-ui/core/Button';\nimport imgAPI from '~/public/images/imgAPI';\nimport { withTranslation } from '~/i18n';\nimport { useText } from '~/theme/common';\nimport yt from '~/youtube';\nimport CrossParallax from '../Parallax/Cross';\nimport useStyles from './banner-style';\n\nfunction Banner(props) {\n  var classes = useStyles();\n  var text = useText();\n  var t = props.t;\n  var theme = useTheme();\n  var isDesktop = useMediaQuery(theme.breakpoints.up('lg'));\n  var isMobile = useMediaQuery(theme.breakpoints.down('md'));\n\n  var _useState = useState(false),\n      play = _useState[0],\n      setPlayed = _useState[1];\n\n  var _useState2 = useState(true),\n      playCtrl = _useState2[0],\n      setPlayedCtrl = _useState2[1];\n\n  var _useState3 = useState([]),\n      player = _useState3[0],\n      setPlayer = _useState3[1];\n\n  useEffect(function () {\n    if (isDesktop) {\n      /* Attention\n      ** HandleScroll function to optimize site with video background may give an error log\n      ** Uncaught TypeError: Cannot read property 'src' of null\n      ** It's because HMR in development mode, and react-youtube need to refresh.\n      ** The error log will not happen in production mode or just reload browser (development mode)\n      ** You can uncomment _onPlay() function, if you don't want see error browser log.\n      ** But then every changes you make, the browser will auto reload.\n      */\n      // _onPlay();\n    }\n  }, []);\n\n  var _onEnd = function _onEnd(event) {\n    event.target.playVideo();\n  };\n\n  var _onPlay = function _onPlay() {\n    var curTime = player[0].getCurrentTime();\n\n    if (curTime > 0) {\n      setPlayed(true);\n    }\n  };\n\n  var _onReady = function _onReady(event) {\n    player.push(event.target);\n    setPlayer(player);\n  };\n\n  var _onTogglePause = function _onTogglePause() {\n    setPlayedCtrl(!playCtrl);\n\n    if (playCtrl) {\n      player[0].pauseVideo();\n    } else {\n      player[0].playVideo();\n    }\n  };\n\n  var opts = {\n    height: '720',\n    width: '1080',\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1,\n      controls: 0,\n      rel: 0,\n      showinfo: 0,\n      mute: 1,\n      origin: 'http://localhost:3006'\n    }\n  };\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(Hidden, {\n    mdDown: true\n  }, play && __jsx(IconButton, {\n    className: classes.btnPlay,\n    onClick: _onTogglePause\n  }, playCtrl ? __jsx(PauseIcon, null) : __jsx(PlayIcon, null))), __jsx(Container, {\n    fixed: !isMobile,\n    className: classes.bannerWrap\n  }, __jsx(\"div\", {\n    className: classes.video\n  }, __jsx(\"div\", {\n    className: classes.overlay\n  }), !play || isMobile ? __jsx(\"img\", {\n    src: imgAPI.architect[0],\n    alt: \"cover\"\n  }) : null, yt.use && __jsx(YouTube, {\n    videoId: \"TA04Qau-UnA\",\n    opts: opts,\n    onReady: _onReady,\n    onEnd: _onEnd,\n    onPlay: _onPlay\n  })), __jsx(\"div\", {\n    className: classes.parallax\n  }, __jsx(CrossParallax, null)), __jsx(\"div\", {\n    className: classes.block\n  }, __jsx(Grid, {\n    container: true,\n    justify: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true,\n    md: 9,\n    xs: 12\n  }, __jsx(\"div\", {\n    className: classes.paperWrap\n  }, __jsx(Paper, {\n    className: classes.paper\n  }, __jsx(Typography, {\n    variant: \"h4\",\n    className: text.title2\n  }, t('common:architect-landing.banner_title')), __jsx(Typography, {\n    className: clsx(classes.subtitle, text.subtitle2)\n  }, t('common:architect-landing.banner_desc')), __jsx(Button, {\n    color: \"primary\",\n    size: \"large\",\n    variant: \"contained\",\n    className: classes.button\n  }, t('common:architect-landing.banner_btn')))))))));\n}\n\nexport default withTranslation(['architect-landing'])(Banner);","map":null,"metadata":{},"sourceType":"module"}