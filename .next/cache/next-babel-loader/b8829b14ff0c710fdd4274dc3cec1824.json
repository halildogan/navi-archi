{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport clsx from 'clsx';\nimport Popover from '@material-ui/core/Popover';\nimport IconButton from '@material-ui/core/IconButton';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport CheckIcon from '@material-ui/icons/Check';\nimport List from '@material-ui/core/List';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Switch from '@material-ui/core/Switch';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { i18n, withTranslation } from '~/i18n';\nimport useStyles from './header-style';\nvar themeType = 'light';\n\nif (typeof Storage !== 'undefined') {\n  themeType = localStorage.getItem('luxiTheme') || 'light';\n}\n\nfunction Settings(props) {\n  var _useState = useState(null),\n      ctn = _useState[0],\n      setCtn = _useState[1];\n\n  var classes = useStyles();\n\n  var _useState2 = useState(null),\n      anchorEl = _useState2[0],\n      setAnchorEl = _useState2[1];\n\n  var _useState3 = useState(themeType === 'dark'),\n      isDark = _useState3[0],\n      setDark = _useState3[1];\n\n  function handleClick(event) {\n    setAnchorEl(event.currentTarget);\n  }\n\n  function handleClose() {\n    setAnchorEl(null);\n  }\n\n  var handleChangeMode = function handleChangeMode() {\n    setDark(!isDark);\n    props.toggleDark();\n  };\n\n  function handleChangeLang(lang) {\n    if (lang === 'ar') {\n      i18n.changeLanguage('ar');\n      props.toggleDir('rtl');\n    } else {\n      i18n.changeLanguage(lang);\n      props.toggleDir('ltr');\n    }\n\n    setAnchorEl(null);\n  }\n\n  useEffect(function () {\n    setCtn(document.getElementById('main-wrap'));\n  });\n  var open = Boolean(anchorEl);\n  var id = open ? 'simple-popover' : undefined;\n  var invert = props.invert,\n      t = props.t;\n  return __jsx(\"div\", {\n    className: classes.setting\n  }, __jsx(IconButton, {\n    \"aria-describedby\": id,\n    \"aria-label\": \"Settings\",\n    onClick: handleClick,\n    className: clsx(classes.icon, open && classes.active, invert && classes.invert)\n  }, __jsx(SettingsIcon, {\n    fontSize: \"inherit\"\n  })), __jsx(Popover, {\n    id: id,\n    open: open,\n    anchorEl: anchorEl,\n    onClose: handleClose,\n    container: ctn,\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: 'center'\n    },\n    transformOrigin: {\n      vertical: 'top',\n      horizontal: 'center'\n    }\n  }, __jsx(List, {\n    component: \"nav\",\n    className: classes.modeMenu,\n    \"aria-label\": \"Mode-menu\",\n    subheader: __jsx(ListSubheader, {\n      component: \"div\"\n    }, t('common:architect-landing.header_theme'))\n  }, __jsx(ListItem, null, __jsx(Typography, {\n    component: \"div\"\n  }, __jsx(Grid, {\n    component: \"label\",\n    container: true,\n    alignItems: \"center\",\n    spacing: 1\n  }, __jsx(Grid, {\n    item: true\n  }, t('common:architect-landing.header_light')), __jsx(Grid, {\n    item: true\n  }, __jsx(Switch, {\n    checked: isDark,\n    onChange: handleChangeMode,\n    value: isDark,\n    inputProps: {\n      'aria-label': 'checkbox'\n    }\n  })), __jsx(Grid, {\n    item: true\n  }, t('common:architect-landing.header_dark')))))), __jsx(Divider, null), __jsx(List, {\n    component: \"nav\",\n    className: classes.langMenu,\n    \"aria-label\": \"Language-menu\",\n    subheader: __jsx(ListSubheader, {\n      component: \"div\"\n    }, t('common:architect-landing.header_language'))\n  }, i18n.options.allLanguages && i18n.options.allLanguages.map(function (val) {\n    return __jsx(ListItem, {\n      key: val,\n      role: undefined,\n      dense: true,\n      button: true,\n      onClick: function onClick() {\n        return handleChangeLang(val);\n      }\n    }, __jsx(ListItemIcon, null, __jsx(\"i\", {\n      className: val\n    })), __jsx(ListItemText, {\n      primary: t('common:' + val)\n    }), i18n.language === val && __jsx(ListItemSecondaryAction, null, __jsx(CheckIcon, {\n      color: \"primary\"\n    })));\n  }))));\n}\n\nSettings.defaultProps = {\n  invert: false\n};\nexport default withTranslation(['common', 'architect-landing'])(Settings);","map":null,"metadata":{},"sourceType":"module"}