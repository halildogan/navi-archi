{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { withTranslation } from '../../i18n';\nimport routeLink from '../../public/text/link';\nimport useStyles from './header-style';\nimport navMenu from './menu';\n\nfunction MobileMenu(props) {\n  const classes = useStyles();\n  const {\n    toggleDrawer,\n    open,\n    t\n  } = props;\n\n  const SideList = () => __jsx(\"div\", {\n    className: classes.mobileNav,\n    role: \"presentation\",\n    onClick: toggleDrawer,\n    onKeyDown: toggleDrawer\n  }, __jsx(\"div\", {\n    className: clsx(classes.menu, open && classes.menuOpen)\n  }, __jsx(List, {\n    component: \"nav\"\n  }, navMenu.map((item, index) => __jsx(ListItem, {\n    button: true,\n    component: \"a\",\n    href: `#${item}`,\n    key: index.toString(),\n    style: {\n      animationDuration: index * 0.15 + 's'\n    }\n  }, __jsx(ListItemText, {\n    primary: t('common:architect-landing.header_' + item),\n    className: classes.menuList\n  })))), __jsx(ListItem, {\n    button: true,\n    component: \"a\",\n    href: routeLink.architect.contact,\n    style: {\n      animationDuration: navMenu.length * 0.15 + 's'\n    }\n  }, __jsx(ListItemText, {\n    primary: t('common:architect-landing.header_contact'),\n    className: classes.menuList\n  }))));\n\n  return __jsx(SwipeableDrawer, {\n    open: open,\n    onClose: toggleDrawer,\n    onOpen: toggleDrawer,\n    classes: {\n      paper: classes.paperNav\n    }\n  }, __jsx(SideList, null));\n}\n\nMobileMenu.propTypes = {\n  toggleDrawer: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  t: PropTypes.func.isRequired\n};\nexport default withTranslation(['architect-landing'])(MobileMenu);","map":{"version":3,"sources":["/Users/halildogan/Desktop/hd-dev.nosync/navi/navi.archi/components/Header/MobileMenu.js"],"names":["React","PropTypes","clsx","SwipeableDrawer","List","ListItem","ListItemText","withTranslation","routeLink","useStyles","navMenu","MobileMenu","props","classes","toggleDrawer","open","t","SideList","mobileNav","menu","menuOpen","map","item","index","toString","animationDuration","menuList","architect","contact","length","paper","paperNav","propTypes","func","isRequired","bool"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,SAASC,eAAT,QAAgC,YAAhC;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAOC,OAAP,MAAoB,QAApB;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,QAAMC,OAAO,GAAGJ,SAAS,EAAzB;AACA,QAAM;AAAEK,IAAAA,YAAF;AAAgBC,IAAAA,IAAhB;AAAsBC,IAAAA;AAAtB,MAA4BJ,KAAlC;;AACA,QAAMK,QAAQ,GAAG,MACf;AACE,IAAA,SAAS,EAAEJ,OAAO,CAACK,SADrB;AAEE,IAAA,IAAI,EAAC,cAFP;AAGE,IAAA,OAAO,EAAEJ,YAHX;AAIE,IAAA,SAAS,EAAEA;AAJb,KAME;AAAK,IAAA,SAAS,EAAEZ,IAAI,CAACW,OAAO,CAACM,IAAT,EAAeJ,IAAI,IAAIF,OAAO,CAACO,QAA/B;AAApB,KACE,MAAC,IAAD;AAAM,IAAA,SAAS,EAAC;AAAhB,KACGV,OAAO,CAACW,GAAR,CAAY,CAACC,IAAD,EAAOC,KAAP,KACX,MAAC,QAAD;AACE,IAAA,MAAM,MADR;AAEE,IAAA,SAAS,EAAC,GAFZ;AAGE,IAAA,IAAI,EAAG,IAAGD,IAAK,EAHjB;AAIE,IAAA,GAAG,EAAEC,KAAK,CAACC,QAAN,EAJP;AAKE,IAAA,KAAK,EAAE;AAAEC,MAAAA,iBAAiB,EAAEF,KAAK,GAAG,IAAR,GAAe;AAApC;AALT,KAOE,MAAC,YAAD;AAAc,IAAA,OAAO,EAAEP,CAAC,CAAC,qCAAqCM,IAAtC,CAAxB;AAAqE,IAAA,SAAS,EAAET,OAAO,CAACa;AAAxF,IAPF,CADD,CADH,CADF,EAcE,MAAC,QAAD;AACE,IAAA,MAAM,MADR;AAEE,IAAA,SAAS,EAAC,GAFZ;AAGE,IAAA,IAAI,EAAElB,SAAS,CAACmB,SAAV,CAAoBC,OAH5B;AAIE,IAAA,KAAK,EAAE;AAAEH,MAAAA,iBAAiB,EAAEf,OAAO,CAACmB,MAAR,GAAiB,IAAjB,GAAwB;AAA7C;AAJT,KAME,MAAC,YAAD;AAAc,IAAA,OAAO,EAAEb,CAAC,CAAC,yCAAD,CAAxB;AAAqE,IAAA,SAAS,EAAEH,OAAO,CAACa;AAAxF,IANF,CAdF,CANF,CADF;;AAiCA,SACE,MAAC,eAAD;AACE,IAAA,IAAI,EAAEX,IADR;AAEE,IAAA,OAAO,EAAED,YAFX;AAGE,IAAA,MAAM,EAAEA,YAHV;AAIE,IAAA,OAAO,EAAE;AACPgB,MAAAA,KAAK,EAAEjB,OAAO,CAACkB;AADR;AAJX,KAQE,MAAC,QAAD,OARF,CADF;AAYD;;AAGDpB,UAAU,CAACqB,SAAX,GAAuB;AACrBlB,EAAAA,YAAY,EAAEb,SAAS,CAACgC,IAAV,CAAeC,UADR;AAErBnB,EAAAA,IAAI,EAAEd,SAAS,CAACkC,IAAV,CAAeD,UAFA;AAGrBlB,EAAAA,CAAC,EAAEf,SAAS,CAACgC,IAAV,CAAeC;AAHG,CAAvB;AAMA,eAAe3B,eAAe,CAAC,CAAC,mBAAD,CAAD,CAAf,CAAuCI,UAAvC,CAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { withTranslation } from '../../i18n';\nimport routeLink from '../../public/text/link';\nimport useStyles from './header-style';\nimport navMenu from './menu';\n\nfunction MobileMenu(props) {\n  const classes = useStyles();\n  const { toggleDrawer, open, t } = props;\n  const SideList = () => (\n    <div\n      className={classes.mobileNav}\n      role=\"presentation\"\n      onClick={toggleDrawer}\n      onKeyDown={toggleDrawer}\n    >\n      <div className={clsx(classes.menu, open && classes.menuOpen)}>\n        <List component=\"nav\">\n          {navMenu.map((item, index) => (\n            <ListItem\n              button\n              component=\"a\"\n              href={`#${item}`}\n              key={index.toString()}\n              style={{ animationDuration: index * 0.15 + 's' }}\n            >\n              <ListItemText primary={t('common:architect-landing.header_' + item)} className={classes.menuList} />\n            </ListItem>\n          ))}\n        </List>\n        <ListItem\n          button\n          component=\"a\"\n          href={routeLink.architect.contact}\n          style={{ animationDuration: navMenu.length * 0.15 + 's' }}\n        >\n          <ListItemText primary={t('common:architect-landing.header_contact')} className={classes.menuList} />\n        </ListItem>\n      </div>\n    </div>\n  );\n\n  return (\n    <SwipeableDrawer\n      open={open}\n      onClose={toggleDrawer}\n      onOpen={toggleDrawer}\n      classes={{\n        paper: classes.paperNav\n      }}\n    >\n      <SideList />\n    </SwipeableDrawer>\n  );\n}\n\n\nMobileMenu.propTypes = {\n  toggleDrawer: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  t: PropTypes.func.isRequired\n};\n\nexport default withTranslation(['architect-landing'])(MobileMenu);\n"]},"metadata":{},"sourceType":"module"}