{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Container from '@material-ui/core/Container';\nimport clsx from 'clsx';\nimport Hidden from '@material-ui/core/Hidden';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\nimport PlayIcon from '@material-ui/icons/PlayArrow';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Grid from '@material-ui/core/Grid';\nimport YouTube from 'react-youtube';\nimport Button from '@material-ui/core/Button';\nimport imgAPI from '../../public/images/imgAPI';\nimport { withTranslation } from '../../i18n';\nimport { useText } from '../../theme/common';\nimport yt from '../../youtube';\nimport CrossParallax from '../Parallax/Cross';\nimport useStyles from './banner-style';\n\nfunction Banner(props) {\n  const classes = useStyles();\n  const text = useText();\n  const {\n    t\n  } = props;\n  const theme = useTheme();\n  const isDesktop = useMediaQuery(theme.breakpoints.up('lg'));\n  const isMobile = useMediaQuery(theme.breakpoints.down('md'));\n  const {\n    0: play,\n    1: setPlayed\n  } = useState(false);\n  const {\n    0: playCtrl,\n    1: setPlayedCtrl\n  } = useState(true);\n  const {\n    0: player,\n    1: setPlayer\n  } = useState([]);\n  useEffect(() => {\n    if (isDesktop) {\n      /* Attention\n      ** HandleScroll function to optimize site with video background may give an error log\n      ** Uncaught TypeError: Cannot read property 'src' of null\n      ** It's because HMR in development mode, and react-youtube need to refresh.\n      ** The error log will not happen in production mode or just reload browser (development mode)\n      ** You can uncomment _onPlay() function, if you don't want see error browser log.\n      ** But then every changes you make, the browser will auto reload.\n      */\n      // _onPlay();\n    }\n  }, []);\n\n  const _onEnd = event => {\n    event.target.playVideo();\n  };\n\n  const _onPlay = () => {\n    const curTime = player[0].getCurrentTime();\n\n    if (curTime > 0) {\n      setPlayed(true);\n    }\n  };\n\n  const _onReady = event => {\n    player.push(event.target);\n    setPlayer(player);\n  };\n\n  const _onTogglePause = () => {\n    setPlayedCtrl(!playCtrl);\n\n    if (playCtrl) {\n      player[0].pauseVideo();\n    } else {\n      player[0].playVideo();\n    }\n  };\n\n  const opts = {\n    height: '720',\n    width: '1080',\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1,\n      controls: 0,\n      rel: 0,\n      showinfo: 0,\n      mute: 1,\n      origin: 'http://localhost:3006'\n    }\n  };\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(Hidden, {\n    mdDown: true\n  }, play && __jsx(IconButton, {\n    className: classes.btnPlay,\n    onClick: _onTogglePause\n  }, playCtrl ? __jsx(PauseIcon, null) : __jsx(PlayIcon, null))), __jsx(Container, {\n    fixed: !isMobile,\n    className: classes.bannerWrap\n  }, __jsx(\"div\", {\n    className: classes.video\n  }, __jsx(\"div\", {\n    className: classes.overlay\n  }), !play || isMobile ? __jsx(\"img\", {\n    src: imgAPI.architect[0],\n    alt: \"cover\"\n  }) : null, yt.use && __jsx(YouTube, {\n    videoId: \"TA04Qau-UnA\",\n    opts: opts,\n    onReady: _onReady,\n    onEnd: _onEnd,\n    onPlay: _onPlay\n  })), __jsx(\"div\", {\n    className: classes.parallax\n  }, __jsx(CrossParallax, null)), __jsx(\"div\", {\n    className: classes.block\n  }, __jsx(Grid, {\n    container: true,\n    justify: \"flex-end\"\n  }, __jsx(Grid, {\n    item: true,\n    md: 9,\n    xs: 12\n  }, __jsx(\"div\", {\n    className: classes.paperWrap\n  }, __jsx(Paper, {\n    className: classes.paper\n  }, __jsx(Typography, {\n    variant: \"h4\",\n    className: text.title2\n  }, t('common:architect-landing.banner_title')), __jsx(Typography, {\n    className: clsx(classes.subtitle, text.subtitle2)\n  }, t('common:architect-landing.banner_desc')), __jsx(Button, {\n    color: \"primary\",\n    size: \"large\",\n    variant: \"contained\",\n    className: classes.button\n  }, t('common:architect-landing.banner_btn')))))))));\n}\n\nBanner.propTypes = {\n  t: PropTypes.func.isRequired\n};\nexport default withTranslation(['architect-landing'])(Banner);","map":{"version":3,"sources":["/Users/halildogan/Desktop/hd-dev.nosync/zer/zer.archi/components/VideoBanner/VideoBanner.js"],"names":["React","useState","useEffect","PropTypes","Container","clsx","Hidden","useMediaQuery","useTheme","PlayIcon","PauseIcon","Paper","Typography","IconButton","Grid","YouTube","Button","imgAPI","withTranslation","useText","yt","CrossParallax","useStyles","Banner","props","classes","text","t","theme","isDesktop","breakpoints","up","isMobile","down","play","setPlayed","playCtrl","setPlayedCtrl","player","setPlayer","_onEnd","event","target","playVideo","_onPlay","curTime","getCurrentTime","_onReady","push","_onTogglePause","pauseVideo","opts","height","width","playerVars","autoplay","controls","rel","showinfo","mute","origin","root","btnPlay","bannerWrap","video","overlay","architect","use","parallax","block","paperWrap","paper","title2","subtitle","subtitle2","button","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Container from '@material-ui/core/Container';\nimport clsx from 'clsx';\nimport Hidden from '@material-ui/core/Hidden';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\nimport PlayIcon from '@material-ui/icons/PlayArrow';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Grid from '@material-ui/core/Grid';\nimport YouTube from 'react-youtube';\nimport Button from '@material-ui/core/Button';\nimport imgAPI from '../../public/images/imgAPI';\nimport { withTranslation } from '../../i18n';\nimport { useText } from '../../theme/common';\nimport yt from '../../youtube';\nimport CrossParallax from '../Parallax/Cross';\nimport useStyles from './banner-style';\n\nfunction Banner(props) {\n  const classes = useStyles();\n  const text = useText();\n  const { t } = props;\n  const theme = useTheme();\n  const isDesktop = useMediaQuery(theme.breakpoints.up('lg'));\n  const isMobile = useMediaQuery(theme.breakpoints.down('md'));\n\n  const [play, setPlayed] = useState(false);\n  const [playCtrl, setPlayedCtrl] = useState(true);\n  const [player, setPlayer] = useState([]);\n\n  useEffect(() => {\n    if (isDesktop) {\n      /* Attention\n      ** HandleScroll function to optimize site with video background may give an error log\n      ** Uncaught TypeError: Cannot read property 'src' of null\n      ** It's because HMR in development mode, and react-youtube need to refresh.\n      ** The error log will not happen in production mode or just reload browser (development mode)\n      ** You can uncomment _onPlay() function, if you don't want see error browser log.\n      ** But then every changes you make, the browser will auto reload.\n      */\n      // _onPlay();\n    }\n  }, []);\n\n  const _onEnd = event => {\n    event.target.playVideo();\n  };\n\n  const _onPlay = () => {\n    const curTime = player[0].getCurrentTime();\n    if (curTime > 0) {\n      setPlayed(true);\n    }\n  };\n\n  const _onReady = event => {\n    player.push(event.target);\n    setPlayer(player);\n  };\n\n  const _onTogglePause = () => {\n    setPlayedCtrl(!playCtrl);\n    if (playCtrl) {\n      player[0].pauseVideo();\n    } else {\n      player[0].playVideo();\n    }\n  };\n\n  const opts = {\n    height: '720',\n    width: '1080',\n    playerVars: { // https://developers.google.com/youtube/player_parameters\n      autoplay: 1,\n      controls: 0,\n      rel: 0,\n      showinfo: 0,\n      mute: 1,\n      origin: 'http://localhost:3006'\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Hidden mdDown>\n        {play && (\n          <IconButton\n            className={classes.btnPlay}\n            onClick={_onTogglePause}\n          >\n            {playCtrl ? <PauseIcon /> : <PlayIcon />}\n          </IconButton>\n        )}\n      </Hidden>\n      <Container fixed={!isMobile} className={classes.bannerWrap}>\n        <div className={classes.video}>\n          <div className={classes.overlay} />\n          {!play || isMobile ? <img src={imgAPI.architect[0]} alt=\"cover\" /> : null}\n          {yt.use && (\n            <YouTube\n              videoId=\"TA04Qau-UnA\"\n              opts={opts}\n              onReady={_onReady}\n              onEnd={_onEnd}\n              onPlay={_onPlay}\n            />\n          )}\n        </div>\n        <div className={classes.parallax}>\n          <CrossParallax />\n        </div>\n        <div className={classes.block}>\n          <Grid container justify=\"flex-end\">\n            <Grid item md={9} xs={12}>\n              <div className={classes.paperWrap}>\n                <Paper className={classes.paper}>\n                  <Typography variant=\"h4\" className={text.title2}>\n                    {t('common:architect-landing.banner_title')}\n                  </Typography>\n                  <Typography className={clsx(classes.subtitle, text.subtitle2)}>\n                    {t('common:architect-landing.banner_desc')}\n                  </Typography>\n                  <Button color=\"primary\" size=\"large\" variant=\"contained\" className={classes.button}>\n                    {t('common:architect-landing.banner_btn')}\n                  </Button>\n                </Paper>\n              </div>\n            </Grid>\n          </Grid>\n        </div>\n      </Container>\n    </div>\n  );\n}\n\nBanner.propTypes = {\n  t: PropTypes.func.isRequired\n};\n\nexport default withTranslation(['architect-landing'])(Banner);\n"]},"metadata":{},"sourceType":"module"}