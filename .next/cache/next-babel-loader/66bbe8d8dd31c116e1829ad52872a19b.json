{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { Parallax } from 'react-parallax';\nimport imgAPI from '../../public/images/imgAPI';\nimport { useText } from '../../theme/common';\nimport { withTranslation } from '../../i18n';\nimport useStyles from './subscribe-style';\nimport SubscriptionController from \"../../controller/support/SubscriptionController\";\n\nfunction SubscribeForm(props) {\n  const classes = useStyles();\n  const text = useText();\n  const {\n    t\n  } = props;\n  const {\n    0: value,\n    1: setValue\n  } = useState('');\n  const {\n    0: openNotif,\n    1: setNotif\n  } = useState(false);\n\n  function handleChange(event) {\n    setValue(event.target.value);\n  }\n\n  const handleClose = () => {\n    setNotif(false);\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(Parallax, {\n    blur: 0,\n    bgImage: imgAPI.architect[15],\n    bgImageAlt: \"benefit\",\n    strength: 300\n  }, __jsx(\"div\", {\n    className: classes.parallaxWrap\n  })), __jsx(Snackbar, {\n    anchorOrigin: {\n      vertical: 'top',\n      horizontal: 'right'\n    },\n    key: \"top right\",\n    open: openNotif,\n    autoHideDuration: 4000,\n    onClose: handleClose,\n    ContentProps: {\n      'aria-describedby': 'message-id'\n    },\n    message: __jsx(\"span\", {\n      id: \"message-id\"\n    }, \"Thank you! You subscribed.\")\n  }), __jsx(Container, {\n    fixed: true\n  }, __jsx(Paper, {\n    className: classes.form\n  }, __jsx(Typography, {\n    variant: \"h4\",\n    className: text.title2\n  }, t('common:architect-landing.subscribe_title')), __jsx(Typography, {\n    className: text.subtitle2\n  }, t('common:architect-landing.subscribe_subtitle')), __jsx(SubscriptionController, null, data => {\n    const {\n      createSupport,\n      loading\n    } = data;\n    return __jsx(\"form\", null, __jsx(TextField, {\n      className: classes.field,\n      fullWidth: true,\n      label: t('common:architect-landing.subscribe_input'),\n      placeholder: t('common:architect-landing.subscribe_input'),\n      onChange: e => handleChange(e),\n      value: value\n    }), __jsx(Button, {\n      onClick: () => {\n        createSupport({\n          variables: {\n            input: {\n              email: value,\n              appId: \"3e005e83-7aea-4ca0-8c03-d3d3daaf8227\"\n            }\n          }\n        }).then(res => {\n          setNotif(true);\n          setValue(\"\");\n        }).catch(error => console.log(error));\n      },\n      disabled: !value,\n      variant: \"contained\",\n      size: \"large\",\n      color: \"secondary\",\n      className: classes.button\n    }, t('common:architect-landing.subscribe_subscribe')));\n  }))));\n}\n\nexport default withTranslation(['architect-landing'])(SubscribeForm);","map":{"version":3,"sources":["/Users/halildogan/Desktop/hd-dev.nosync/navi/navi.archi/components/SubscribeForm/SubscribeForm.js"],"names":["React","useState","Button","Container","Typography","Paper","TextField","Snackbar","Parallax","imgAPI","useText","withTranslation","useStyles","SubscriptionController","SubscribeForm","props","classes","text","t","value","setValue","openNotif","setNotif","handleChange","event","target","handleClose","root","architect","parallaxWrap","vertical","horizontal","form","title2","subtitle2","data","createSupport","loading","field","e","variables","input","email","appId","then","res","catch","error","console","log","button"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { Parallax } from 'react-parallax';\nimport imgAPI from '../../public/images/imgAPI';\nimport { useText } from '../../theme/common';\nimport { withTranslation } from '../../i18n';\nimport useStyles from './subscribe-style';\n\nimport SubscriptionController from \"../../controller/support/SubscriptionController\";\n\nfunction SubscribeForm(props) {\n  const classes = useStyles();\n  const text = useText();\n  const { t } = props;\n  const [value, setValue] = useState('');\n\n  const [openNotif, setNotif] = useState(false);\n\n  function handleChange(event) {\n    setValue(event.target.value);\n  }\n\n  const handleClose = () => {\n    setNotif(false);\n  };\n  \n  return (\n    <div className={classes.root}>\n      <Parallax\n        blur={0}\n        bgImage={imgAPI.architect[15]}\n        bgImageAlt=\"benefit\"\n        strength={300}\n      >\n        <div className={classes.parallaxWrap} />\n      </Parallax>\n      <Snackbar\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n        key=\"top right\"\n        open={openNotif}\n        autoHideDuration={4000}\n        onClose={handleClose}\n        ContentProps={{\n          'aria-describedby': 'message-id',\n        }}\n        message={<span id=\"message-id\">Thank you! You subscribed.</span>}\n      />\n      <Container fixed>\n        <Paper className={classes.form}>\n          <Typography variant=\"h4\" className={text.title2}>\n            {t('common:architect-landing.subscribe_title')}\n          </Typography>\n          <Typography className={text.subtitle2}>\n            {t('common:architect-landing.subscribe_subtitle')}\n          </Typography>\n          <SubscriptionController>\n            {(data) => {\n              const {createSupport, loading} = data;\n              return (\n                <form>\n                  <TextField\n                    className={classes.field}\n                    fullWidth\n                    label={t('common:architect-landing.subscribe_input')}\n                    placeholder={t('common:architect-landing.subscribe_input')}\n                    onChange={(e) => handleChange(e)}\n                    value={value}\n                  />\n                  <Button onClick={() => {\n                    createSupport({\n                      variables: {\n                        input: {\n                          email: value,\n                          appId: \"3e005e83-7aea-4ca0-8c03-d3d3daaf8227\"\n                        }\n                      }\n                    }).then(res => {\n                      setNotif(true);\n                      setValue(\"\")\n                    }).catch(error => console.log(error))\n                  }} disabled={!value} variant=\"contained\" size=\"large\" color=\"secondary\" className={classes.button}>\n                    {t('common:architect-landing.subscribe_subscribe')}\n                  </Button>\n                </form>\n              )\n            }}\n          </SubscriptionController>\n        </Paper>\n      </Container>\n    </div>\n  );\n}\n\nSubscribeForm.propTypes = {\n  t: PropTypes.func.isRequired\n};\n\nexport default withTranslation(['architect-landing'])(SubscribeForm);\n"]},"metadata":{},"sourceType":"module"}