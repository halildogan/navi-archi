{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport clsx from 'clsx';\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\nimport Scrollspy from 'react-scrollspy';\nimport Fab from '@material-ui/core/Fab';\nimport ArrowIcon from '@material-ui/icons/ArrowUpward';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { withTranslation } from '../../i18n';\nimport navMenu from '../Header/menu';\nimport useStyles from './pagenav-style';\n\nfunction createData(id, name, url) {\n  return {\n    id: id,\n    name: name,\n    url: url\n  };\n}\n\nvar LinkBtn = React.forwardRef(function LinkBtn(props, ref) {\n  // eslint-disable-line\n  return __jsx(AnchorLink, _extends({\n    to: props.to\n  }, props)); // eslint-disable-line\n});\n\nfunction PageNav(props) {\n  var t = props.t;\n\n  var _useState = useState(false),\n      show = _useState[0],\n      setShow = _useState[1];\n\n  var flagShow = false;\n\n  var handleScroll = function handleScroll() {\n    var doc = document.documentElement;\n    var scroll = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);\n    var newFlagShow = scroll > 500;\n\n    if (flagShow !== newFlagShow) {\n      setShow(newFlagShow);\n      flagShow = newFlagShow;\n    }\n  };\n\n  useEffect(function () {\n    window.addEventListener('scroll', handleScroll);\n  }, []);\n  var classes = useStyles();\n\n  var _useState2 = useState([createData(1, navMenu[0], '#' + navMenu[0].replace(/ /g, '_')), createData(2, navMenu[1], '#' + navMenu[1].replace(/ /g, '_')), createData(3, navMenu[2], '#' + navMenu[2].replace(/ /g, '_')), createData(4, navMenu[3], '#' + navMenu[3].replace(/ /g, '_'))]),\n      menuList = _useState2[0];\n\n  return __jsx(\"div\", {\n    className: clsx(classes.pageNav, show && classes.show)\n  }, __jsx(\"nav\", {\n    className: classes.sectionNav\n  }, __jsx(Scrollspy, {\n    items: navMenu,\n    currentClassName: \"active\"\n  }, menuList.map(function (item) {\n    return __jsx(\"li\", {\n      key: item.id.toString(),\n      style: {\n        top: 30 * (navMenu.length - item.id)\n      },\n      \"data-id\": item.id\n    }, __jsx(Tooltip, {\n      title: t('common:architect-landing.header_' + item.name),\n      placement: \"left\",\n      classes: {\n        tooltip: classes.tooltip\n      }\n    }, __jsx(AnchorLink, {\n      href: item.url\n    })));\n  }))), __jsx(Tooltip, {\n    title: \"To Top\",\n    placement: \"left\",\n    classes: {\n      tooltip: classes.tooltip\n    }\n  }, __jsx(Fab, {\n    color: \"secondary\",\n    \"aria-label\": \"To top\",\n    component: LinkBtn,\n    href: \"#home\",\n    className: classes.fab\n  }, __jsx(ArrowIcon, null))));\n}\n\nexport default withTranslation(['architect-landing'])(PageNav);","map":null,"metadata":{},"sourceType":"module"}