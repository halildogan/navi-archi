{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n                                fragment NewSupport on Support {\\n                                    id\\n                                }\\n                            \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql, useMutation, useApolloClient } from \"@apollo/react-hooks\";\nimport { MUTATION_CREATE_SUPPORT } from \"./Support\";\n\nvar CreateSupportController = function CreateSupportController(_ref) {\n  _s();\n\n  var children = _ref.children;\n  var client = useApolloClient();\n\n  var _useMutation = useMutation(MUTATION_CREATE_SUPPORT, {\n    update: function update(cache, _ref2) {\n      var createSupport = _ref2.data.createSupport;\n      cache.modify({\n        fields: {\n          supports: function supports() {\n            var existingSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n            var newSupportRef = cache.writeFragment({\n              data: createSupport,\n              fragment: gql(_templateObject())\n            });\n            return [].concat(_toConsumableArray(existingSupport), [newSupportRef]);\n          }\n        }\n      });\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      createSupport = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      loading = _useMutation2$.loading,\n      error = _useMutation2$.error;\n\n  if (loading) return null;\n  if (error) console.log(\"error: \", error.message);\n  return children({\n    createSupport: createSupport,\n    loading: loading\n  });\n};\n\n_s(CreateSupportController, \"skvOV1r0dCXq35iCPPWhNHfi2Lw=\", false, function () {\n  return [useApolloClient, useMutation];\n});\n\n_c = CreateSupportController;\nexport default CreateSupportController;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateSupportController\");","map":{"version":3,"sources":["/Users/halildogan/Desktop/hd-dev.nosync/zer/zer.archi/controller/support/CreateSupportController.js"],"names":["gql","useMutation","useApolloClient","MUTATION_CREATE_SUPPORT","CreateSupportController","children","client","update","cache","createSupport","data","modify","fields","supports","existingSupport","newSupportRef","writeFragment","fragment","loading","error","console","log","message"],"mappings":";;;;;;;;;;;;;;;;AAAA,SAAQA,GAAR,EAAaC,WAAb,EAA0BC,eAA1B,QAAgD,qBAAhD;AAEA,SAAQC,uBAAR,QAAsC,WAAtC;;AAEA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,OAE1B;AAAA;;AAAA,MADFC,QACE,QADFA,QACE;AACF,MAAMC,MAAM,GAAGJ,eAAe,EAA9B;;AADE,qBAEwCD,WAAW,CAACE,uBAAD,EAAyB;AAC1EI,IAAAA,MAD0E,kBACnEC,KADmE,SACrC;AAAA,UAAhBC,aAAgB,SAAtBC,IAAsB,CAAhBD,aAAgB;AACjCD,MAAAA,KAAK,CAACG,MAAN,CAAa;AACTC,QAAAA,MAAM,EAAE;AACJC,UAAAA,QADI,sBAC0B;AAAA,gBAArBC,eAAqB,uEAAH,EAAG;AAC1B,gBAAMC,aAAa,GAAGP,KAAK,CAACQ,aAAN,CAAoB;AACtCN,cAAAA,IAAI,EAAED,aADgC;AAEtCQ,cAAAA,QAAQ,EAAEjB,GAAF;AAF8B,aAApB,CAAtB;AAQA,gDAAWc,eAAX,IAA4BC,aAA5B;AACH;AAXG;AADC,OAAb;AAeH;AAjByE,GAAzB,CAFnD;AAAA;AAAA,MAEKN,aAFL;AAAA;AAAA,MAEqBS,OAFrB,kBAEqBA,OAFrB;AAAA,MAE8BC,KAF9B,kBAE8BA,KAF9B;;AAqBF,MAAGD,OAAH,EAAY,OAAO,IAAP;AACZ,MAAGC,KAAH,EAAUC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,KAAK,CAACG,OAA7B;AACV,SAAOjB,QAAQ,CAAC;AACZI,IAAAA,aAAa,EAAbA,aADY;AAEZS,IAAAA,OAAO,EAAPA;AAFY,GAAD,CAAf;AAIH,CA7BD;;GAAMd,uB;UAGaF,e,EAC2BD,W;;;KAJxCG,uB;AA8BN,eAAeA,uBAAf","sourcesContent":["import {gql, useMutation, useApolloClient} from \"@apollo/react-hooks\"\n\nimport {MUTATION_CREATE_SUPPORT} from \"./Support\"\n\nconst CreateSupportController = ({\n    children\n}) => {\n    const client = useApolloClient();\n    const [createSupport, {loading, error}] = useMutation(MUTATION_CREATE_SUPPORT,{\n        update(cache, {data:{createSupport}}){\n            cache.modify({\n                fields: {\n                    supports(existingSupport = []){\n                        const newSupportRef = cache.writeFragment({\n                            data: createSupport,\n                            fragment: gql`\n                                fragment NewSupport on Support {\n                                    id\n                                }\n                            `\n                        });\n                        return [...existingSupport, newSupportRef];\n                    }\n                }\n            })\n        }\n    })\n    if(loading) return null;\n    if(error) console.log(\"error: \", error.message);\n    return children({\n        createSupport,\n        loading\n    });\n}\nexport default CreateSupportController;"]},"metadata":{},"sourceType":"module"}