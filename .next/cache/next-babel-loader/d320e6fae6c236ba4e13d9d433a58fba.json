{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport Slide from '@material-ui/core/Slide';\nimport useStyles from './notification-style';\nimport { withTranslation } from '~/i18n';\nimport msg from '~/public/text/brand';\n\nfunction TransitionUp(props) {\n  return __jsx(Slide, _extends({}, props, {\n    direction: \"up\"\n  }));\n}\n\nfunction Notification(props) {\n  const {\n    t\n  } = props;\n  const classes = useStyles();\n  const {\n    0: open,\n    1: setOpen\n  } = useState(true);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return __jsx(Snackbar, {\n    TransitionComponent: TransitionUp,\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: 'center'\n    },\n    classes: {\n      root: classes.notification\n    },\n    open: open,\n    onClose: handleClose\n  }, __jsx(SnackbarContent, {\n    message: __jsx(Typography, {\n      id: \"message-id\"\n    }, msg.architect.notifMsg),\n    classes: {\n      action: classes.action\n    },\n    action: __jsx(Button, {\n      key: \"undo\",\n      variant: \"contained\",\n      color: \"secondary\",\n      className: classes.button,\n      onClick: handleClose\n    }, t('common:accept'))\n  }));\n}\n\nexport default withTranslation(['common'])(Notification);","map":null,"metadata":{},"sourceType":"module"}