{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, Fragment } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Grid from '@material-ui/core/Grid';\nimport clsx from 'clsx';\nimport Button from '@material-ui/core/Button';\nimport Link from 'next/link';\nimport IconButton from '@material-ui/core/IconButton';\nimport Container from '@material-ui/core/Container';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\nimport Scrollspy from 'react-scrollspy';\nimport Settings from './Settings';\nimport MobileMenu from './MobileMenu';\nimport useStyles from './header-style';\nimport navMenu from './menu';\nimport { withTranslation } from '~/i18n';\nimport routeLink from '~/public/text/link';\nimport logo from '~/public/images/architect-logo.svg';\nimport brand from '~/public/text/brand';\nimport '~/vendors/hamburger-menu.css';\nvar counter = 0;\n\nfunction createData(name, url, offset) {\n  counter += 1;\n  return {\n    id: counter,\n    name: name,\n    url: url,\n    offset: offset\n  };\n}\n\nvar LinkBtn = React.forwardRef(function LinkBtn(props, ref) {\n  // eslint-disable-line\n  return __jsx(AnchorLink, _extends({\n    to: props.to\n  }, props, {\n    innerRef: ref\n  })); // eslint-disable-line\n});\n\nfunction Header(props) {\n  var _useState = useState(false),\n      fixed = _useState[0],\n      setFixed = _useState[1];\n\n  var flagFixed = false;\n\n  var handleScroll = function handleScroll() {\n    var doc = document.documentElement;\n    var scroll = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);\n    var newFlagFixed = scroll > 100;\n\n    if (flagFixed !== newFlagFixed) {\n      setFixed(newFlagFixed);\n      flagFixed = newFlagFixed;\n    }\n  };\n\n  useEffect(function () {\n    window.addEventListener('scroll', handleScroll);\n  }, []);\n  var classes = useStyles();\n  var theme = useTheme();\n  var onToggleDark = props.onToggleDark,\n      onToggleDir = props.onToggleDir,\n      invert = props.invert,\n      t = props.t;\n  var isDesktop = useMediaQuery(theme.breakpoints.up('md'));\n  var isTablet = useMediaQuery(theme.breakpoints.down('md'));\n  var isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n\n  var _useState2 = useState([createData(navMenu[0], '#' + navMenu[0]), createData(navMenu[1], '#' + navMenu[1]), createData(navMenu[2], '#' + navMenu[2]), createData(navMenu[3], '#' + navMenu[3]), createData(navMenu[4], '#' + navMenu[4])]),\n      menuList = _useState2[0];\n\n  var _useState3 = useState(false),\n      openDrawer = _useState3[0],\n      setOpenDrawer = _useState3[1];\n\n  var handleOpenDrawer = function handleOpenDrawer() {\n    setOpenDrawer(!openDrawer);\n  };\n\n  return __jsx(Fragment, null, isMobile && __jsx(MobileMenu, {\n    open: openDrawer,\n    toggleDrawer: handleOpenDrawer\n  }), __jsx(AppBar, {\n    component: \"div\",\n    position: \"relative\",\n    id: \"header\",\n    className: clsx(classes.header, fixed && classes.fixed, invert && classes.invert, openDrawer && classes.openDrawer)\n  }, __jsx(Container, {\n    fixed: !isMobile\n  }, __jsx(Grid, {\n    container: true\n  }, __jsx(Grid, {\n    item: true,\n    sm: 2,\n    xs: 7\n  }, __jsx(\"div\", {\n    className: classes.logo\n  }, isMobile && __jsx(IconButton, {\n    onClick: handleOpenDrawer,\n    className: clsx('hamburger hamburger--spring', classes.mobileMenu, openDrawer && 'is-active')\n  }, __jsx(\"span\", {\n    className: \"hamburger-box\"\n  }, __jsx(\"span\", {\n    className: clsx(classes.bar, 'hamburger-inner')\n  }))), invert ? __jsx(Link, {\n    href: \"/\"\n  }, __jsx(\"a\", null, __jsx(\"img\", {\n    src: logo,\n    alt: \"logo\"\n  }), isDesktop && brand.architect.projectName)) : __jsx(AnchorLink, {\n    href: \"#home\"\n  }, __jsx(\"img\", {\n    src: logo,\n    alt: \"logo\"\n  }), isDesktop && brand.architect.projectName))), __jsx(Grid, {\n    item: true,\n    sm: isTablet ? 10 : 9,\n    xs: 5\n  }, __jsx(\"div\", {\n    className: classes.headerContent\n  }, __jsx(\"nav\", {\n    className: clsx(classes.navMenu, invert && classes.invert)\n  }, isDesktop && __jsx(Scrollspy, {\n    items: navMenu,\n    currentClassName: \"active\"\n  }, menuList.map(function (item) {\n    return __jsx(\"li\", {\n      key: item.id.toString()\n    }, invert ? // eslint-disable-next-line\n    __jsx(Button, {\n      offset: item.offset || 0,\n      href: '/' + item.url\n    }, t('common:architect-landing.header_' + item.name)) : // eslint-disable-next-line\n    __jsx(Button, {\n      component: AnchorLink,\n      offset: item.offset || 0,\n      href: item.url\n    }, t('common:architect-landing.header_' + item.name)));\n  }), __jsx(\"li\", null, __jsx(Button, {\n    href: routeLink.architect.contact\n  }, t('common:architect-landing.header_contact'))))), __jsx(\"nav\", {\n    className: classes.navMenu\n  }, __jsx(Settings, {\n    toggleDark: onToggleDark,\n    toggleDir: onToggleDir,\n    invert: invert\n  }))))))));\n}\n\nHeader.defaultProps = {\n  sticky: false,\n  invert: false\n};\nexport default withTranslation(['architect-landing'])(Header);","map":null,"metadata":{},"sourceType":"module"}