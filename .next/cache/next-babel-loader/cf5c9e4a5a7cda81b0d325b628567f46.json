{"ast":null,"code":"import { gql, useMutation, useApolloClient } from \"@apollo/react-hooks\";\nimport { MUTATION_CREATE_SUPPORT } from \"./Support\";\n\nconst CreateSupportController = ({\n  children\n}) => {\n  const client = useApolloClient();\n  const [createSupport, {\n    loading,\n    error\n  }] = useMutation(MUTATION_CREATE_SUPPORT, {\n    update(cache, {\n      data: {\n        createSupport\n      }\n    }) {\n      cache.modify({\n        fields: {\n          supports(existingSupport = []) {\n            const newSupportRef = cache.writeFragment({\n              data: createSupport,\n              fragment: gql`\n                                fragment NewSupport on Support {\n                                    id\n                                }\n                            `\n            });\n            return [...existingSupport, newSupportRef];\n          }\n\n        }\n      });\n    }\n\n  });\n  if (loading) return null;\n  if (error) console.log(\"error: \", error.message);\n  return children({\n    createSupport,\n    loading\n  });\n};\n\nexport default CreateSupportController;","map":{"version":3,"sources":["/Users/halildogan/Desktop/hd-dev.nosync/zer/zer.archi/controller/support/CreateSupportController.js"],"names":["gql","useMutation","useApolloClient","MUTATION_CREATE_SUPPORT","CreateSupportController","children","client","createSupport","loading","error","update","cache","data","modify","fields","supports","existingSupport","newSupportRef","writeFragment","fragment","console","log","message"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,WAAb,EAA0BC,eAA1B,QAAgD,qBAAhD;AAEA,SAAQC,uBAAR,QAAsC,WAAtC;;AAEA,MAAMC,uBAAuB,GAAG,CAAC;AAC7BC,EAAAA;AAD6B,CAAD,KAE1B;AACF,QAAMC,MAAM,GAAGJ,eAAe,EAA9B;AACA,QAAM,CAACK,aAAD,EAAgB;AAACC,IAAAA,OAAD;AAAUC,IAAAA;AAAV,GAAhB,IAAoCR,WAAW,CAACE,uBAAD,EAAyB;AAC1EO,IAAAA,MAAM,CAACC,KAAD,EAAQ;AAACC,MAAAA,IAAI,EAAC;AAACL,QAAAA;AAAD;AAAN,KAAR,EAA+B;AACjCI,MAAAA,KAAK,CAACE,MAAN,CAAa;AACTC,QAAAA,MAAM,EAAE;AACJC,UAAAA,QAAQ,CAACC,eAAe,GAAG,EAAnB,EAAsB;AAC1B,kBAAMC,aAAa,GAAGN,KAAK,CAACO,aAAN,CAAoB;AACtCN,cAAAA,IAAI,EAAEL,aADgC;AAEtCY,cAAAA,QAAQ,EAAEnB,GAAI;;;;;AAFwB,aAApB,CAAtB;AAQA,mBAAO,CAAC,GAAGgB,eAAJ,EAAqBC,aAArB,CAAP;AACH;;AAXG;AADC,OAAb;AAeH;;AAjByE,GAAzB,CAArD;AAmBA,MAAGT,OAAH,EAAY,OAAO,IAAP;AACZ,MAAGC,KAAH,EAAUW,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBZ,KAAK,CAACa,OAA7B;AACV,SAAOjB,QAAQ,CAAC;AACZE,IAAAA,aADY;AAEZC,IAAAA;AAFY,GAAD,CAAf;AAIH,CA7BD;;AA8BA,eAAeJ,uBAAf","sourcesContent":["import {gql, useMutation, useApolloClient} from \"@apollo/react-hooks\"\n\nimport {MUTATION_CREATE_SUPPORT} from \"./Support\"\n\nconst CreateSupportController = ({\n    children\n}) => {\n    const client = useApolloClient();\n    const [createSupport, {loading, error}] = useMutation(MUTATION_CREATE_SUPPORT,{\n        update(cache, {data:{createSupport}}){\n            cache.modify({\n                fields: {\n                    supports(existingSupport = []){\n                        const newSupportRef = cache.writeFragment({\n                            data: createSupport,\n                            fragment: gql`\n                                fragment NewSupport on Support {\n                                    id\n                                }\n                            `\n                        });\n                        return [...existingSupport, newSupportRef];\n                    }\n                }\n            })\n        }\n    })\n    if(loading) return null;\n    if(error) console.log(\"error: \", error.message);\n    return children({\n        createSupport,\n        loading\n    });\n}\nexport default CreateSupportController;"]},"metadata":{},"sourceType":"module"}