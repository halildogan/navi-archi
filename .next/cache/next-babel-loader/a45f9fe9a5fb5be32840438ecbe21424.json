{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport { Parallax } from 'react-parallax';\nimport imgAPI from '../../public/images/imgAPI';\nimport { useText } from '../../theme/common';\nimport { withTranslation } from '../../i18n';\nimport useStyles from './subscribe-style';\nimport SubscriptionController from \"../../controller/support/SubscriptionController\";\n\nfunction SubscribeForm(props) {\n  const classes = useStyles();\n  const text = useText();\n  const {\n    t\n  } = props;\n  const {\n    0: value,\n    1: setValue\n  } = useState('');\n\n  function handleChange(event) {\n    setValue(event.target.value);\n  }\n\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(Parallax, {\n    blur: 0,\n    bgImage: imgAPI.architect[15],\n    bgImageAlt: \"benefit\",\n    strength: 300\n  }, __jsx(\"div\", {\n    className: classes.parallaxWrap\n  })), __jsx(Container, {\n    fixed: true\n  }, __jsx(Paper, {\n    className: classes.form\n  }, __jsx(Typography, {\n    variant: \"h4\",\n    className: text.title2\n  }, t('common:architect-landing.subscribe_title')), __jsx(Typography, {\n    className: text.subtitle2\n  }, t('common:architect-landing.subscribe_subtitle')), __jsx(SubscriptionController, null, data => {\n    const {\n      createSubscription,\n      loading\n    } = data;\n    return __jsx(\"form\", null, __jsx(TextField, {\n      className: classes.field,\n      fullWidth: true,\n      label: t('common:architect-landing.subscribe_input'),\n      placeholder: t('common:architect-landing.subscribe_input'),\n      onChange: e => handleChange(e),\n      value: value\n    }), __jsx(Button, {\n      onClick: () => {\n        createSubscription({\n          variables: {\n            input: {\n              email: value\n            }\n          }\n        }).then(res => {\n          setValue(\"\");\n        }).catch(error => console.log(error));\n      },\n      variant: \"contained\",\n      size: \"large\",\n      color: \"secondary\",\n      className: classes.button\n    }, t('common:architect-landing.subscribe_subscribe')));\n  }))));\n}\n\nSubscribeForm.propTypes = {\n  t: PropTypes.func.isRequired\n};\nexport default withTranslation(['architect-landing'])(SubscribeForm);","map":{"version":3,"sources":["/Users/halildogan/Desktop/hd-dev.nosync/zer/zer.archi/components/SubscribeForm/SubscribeForm.js"],"names":["React","useState","PropTypes","Button","Container","Typography","Paper","TextField","Parallax","imgAPI","useText","withTranslation","useStyles","SubscriptionController","SubscribeForm","props","classes","text","t","value","setValue","handleChange","event","target","root","architect","parallaxWrap","form","title2","subtitle2","data","createSubscription","loading","field","e","variables","input","email","then","res","catch","error","console","log","button","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport { Parallax } from 'react-parallax';\nimport imgAPI from '../../public/images/imgAPI';\nimport { useText } from '../../theme/common';\nimport { withTranslation } from '../../i18n';\nimport useStyles from './subscribe-style';\n\nimport SubscriptionController from \"../../controller/support/SubscriptionController\";\n\nfunction SubscribeForm(props) {\n  const classes = useStyles();\n  const text = useText();\n  const { t } = props;\n  const [value, setValue] = useState('');\n\n  function handleChange(event) {\n    setValue(event.target.value);\n  }\n\n  return (\n    <div className={classes.root}>\n      <Parallax\n        blur={0}\n        bgImage={imgAPI.architect[15]}\n        bgImageAlt=\"benefit\"\n        strength={300}\n      >\n        <div className={classes.parallaxWrap} />\n      </Parallax>\n      <Container fixed>\n        <Paper className={classes.form}>\n          <Typography variant=\"h4\" className={text.title2}>\n            {t('common:architect-landing.subscribe_title')}\n          </Typography>\n          <Typography className={text.subtitle2}>\n            {t('common:architect-landing.subscribe_subtitle')}\n          </Typography>\n          <SubscriptionController>\n            {(data) => {\n              const {createSubscription, loading} = data;\n              return (\n                <form>\n                  <TextField\n                    className={classes.field}\n                    fullWidth\n                    label={t('common:architect-landing.subscribe_input')}\n                    placeholder={t('common:architect-landing.subscribe_input')}\n                    onChange={(e) => handleChange(e)}\n                    value={value}\n                  />\n                  <Button onClick={() => {\n                    createSubscription({\n                      variables: {\n                        input: {\n                          email: value\n                        }\n                      }\n                    }).then(res => {\n                      setValue(\"\")\n                    }).catch(error => console.log(error))\n                  }} variant=\"contained\" size=\"large\" color=\"secondary\" className={classes.button}>\n                    {t('common:architect-landing.subscribe_subscribe')}\n                  </Button>\n                </form>\n              )\n            }}\n          </SubscriptionController>\n        </Paper>\n      </Container>\n    </div>\n  );\n}\n\nSubscribeForm.propTypes = {\n  t: PropTypes.func.isRequired\n};\n\nexport default withTranslation(['architect-landing'])(SubscribeForm);\n"]},"metadata":{},"sourceType":"module"}